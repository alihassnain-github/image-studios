'use client';

import { useState } from 'react';
import { z } from "zod"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { useSignUp } from '@clerk/nextjs';
import { isClerkAPIResponseError } from '@clerk/nextjs/errors';
import { ClerkAPIError } from '@clerk/types';
import { useRouter } from 'next/navigation';
import { useOAuthSignIn } from '@/hooks/useOAuthSignIn';
import Link from 'next/link';
import { toast } from 'react-toastify';

const FormSchema = z.object({
  email: z
    .string()
    .trim()
    .nonempty({ message: "Email is required" })
    .email({ message: "Invalid email address" }),
  password: z
    .string()
    .trim()
    .nonempty({ message: "Password is required" })
    .min(8, { message: "Password must be at least 8 characters long" })
    .max(15, { message: "Password must not exceed 15 characters" })
    .regex(/[a-z]/, { message: "Password must contain at least one lowercase letter" })
    .regex(/[A-Z]/, { message: "Password must contain at least one uppercase letter" })
    .regex(/[0-9]/, { message: "Password must contain at least one number" })
})

export default function SignupForm() {

  const router = useRouter()

  const { signUp } = useSignUp()

  const { signInWith } = useOAuthSignIn()

  const [showPassword, setShowPassword] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { isSubmitting, errors },
  } = useForm({
    resolver: zodResolver(FormSchema),
  })

  async function onSubmit(data: z.infer<typeof FormSchema>) {
    try {
      await signUp?.create({
        emailAddress: data.email,
        password: data.password,
      })

      await signUp?.prepareEmailAddressVerification({ strategy: "email_code" })

      router.push("/verify-email")

    } catch (err: unknown) {
      if (isClerkAPIResponseError(err)) {
        // Clerk gives you an array of ClerkAPIError objects
        err.errors.forEach((clerkError: ClerkAPIError) => {
          toast.error(clerkError.message);
        })
      } else {
        // fallback for unexpected errors
        toast.error("Something went wrong. Please try again.");
      }
    }
  }

  return (
    <div className="card w-full max-w-md bg-base-100 shadow-xl">
      <div className="card-body">

        {/* Logo and Title */}
        <div className="text-center mb-8">
          <Link href="/">
            <svg width="150" height="84" className='mx-auto' viewBox="0 0 117 42" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M1.776 24V20.568H4.608V10.632H1.776V7.2H11.544V10.632H8.688V20.568H11.544V24H1.776ZM15.4245 24V7.2H19.0725L25.1925 17.16L22.5765 17.136L28.7685 7.2H32.2725V24H28.3125V18.768C28.3125 17.328 28.3445 16.032 28.4085 14.88C28.4885 13.728 28.6165 12.584 28.7925 11.448L29.2485 12.696L24.5925 19.92H23.0085L18.4485 12.744L18.9045 11.448C19.0805 12.52 19.2005 13.624 19.2645 14.76C19.3445 15.88 19.3845 17.216 19.3845 18.768V24H15.4245ZM34.3588 24L41.0068 7.2H44.4628L51.0628 24H46.9348L43.7668 15.48C43.6388 15.144 43.5108 14.784 43.3828 14.4C43.2548 14.016 43.1268 13.624 42.9988 13.224C42.8708 12.808 42.7428 12.408 42.6148 12.024C42.5028 11.624 42.4068 11.256 42.3268 10.92L43.0468 10.896C42.9508 11.296 42.8388 11.688 42.7108 12.072C42.5988 12.456 42.4788 12.84 42.3508 13.224C42.2388 13.592 42.1108 13.968 41.9668 14.352C41.8228 14.72 41.6868 15.104 41.5588 15.504L38.3908 24H34.3588ZM37.5268 20.784L38.7988 17.712H46.5268L47.7748 20.784H37.5268ZM60.4901 24.24C59.1461 24.24 57.9301 24.024 56.8421 23.592C55.7541 23.16 54.8181 22.552 54.0341 21.768C53.2501 20.984 52.6501 20.064 52.2341 19.008C51.8181 17.936 51.6101 16.776 51.6101 15.528C51.6101 14.28 51.8261 13.136 52.2581 12.096C52.7061 11.04 53.3381 10.12 54.1541 9.336C54.9701 8.552 55.9301 7.944 57.0341 7.512C58.1541 7.08 59.3701 6.864 60.6821 6.864C61.6101 6.864 62.4821 6.984 63.2981 7.224C64.1301 7.464 64.8821 7.792 65.5541 8.208C66.2261 8.624 66.7941 9.104 67.2581 9.648L64.7861 12.264C64.3861 11.88 63.9701 11.56 63.5381 11.304C63.1221 11.048 62.6741 10.848 62.1941 10.704C61.7141 10.544 61.2021 10.464 60.6581 10.464C59.9541 10.464 59.3061 10.592 58.7141 10.848C58.1381 11.104 57.6261 11.464 57.1781 11.928C56.7461 12.376 56.4101 12.912 56.1701 13.536C55.9301 14.144 55.8101 14.808 55.8101 15.528C55.8101 16.248 55.9381 16.92 56.1941 17.544C56.4501 18.168 56.8021 18.712 57.2501 19.176C57.6981 19.624 58.2261 19.984 58.8341 20.256C59.4581 20.512 60.1221 20.64 60.8261 20.64C61.3221 20.64 61.7861 20.56 62.2181 20.4C62.6661 20.24 63.0501 20.024 63.3701 19.752C63.6901 19.48 63.9461 19.16 64.1381 18.792C64.3301 18.408 64.4261 18 64.4261 17.568V16.944L64.9541 17.76H60.3221V14.568H68.2181C68.2501 14.744 68.2741 14.984 68.2901 15.288C68.3061 15.592 68.3141 15.888 68.3141 16.176C68.3301 16.464 68.3381 16.68 68.3381 16.824C68.3381 17.912 68.1381 18.912 67.7381 19.824C67.3541 20.72 66.8101 21.496 66.1061 22.152C65.4021 22.808 64.5701 23.32 63.6101 23.688C62.6501 24.056 61.6101 24.24 60.4901 24.24ZM71.4636 24V7.2H83.1756V10.68H75.4236V20.52H83.4156V24H71.4636ZM73.3836 17.112V13.8H82.0956V17.112H73.3836Z" fill="#422AD5" />
              <path d="M57.684 38.12C57.26 38.12 56.86 38.06 56.484 37.94C56.108 37.82 55.764 37.64 55.452 37.4C55.14 37.16 54.864 36.864 54.624 36.512L55.272 35.792C55.648 36.328 56.032 36.704 56.424 36.92C56.824 37.136 57.272 37.244 57.768 37.244C58.128 37.244 58.456 37.184 58.752 37.064C59.048 36.944 59.28 36.776 59.448 36.56C59.616 36.344 59.7 36.096 59.7 35.816C59.7 35.632 59.668 35.468 59.604 35.324C59.548 35.18 59.46 35.052 59.34 34.94C59.22 34.828 59.072 34.728 58.896 34.64C58.72 34.552 58.516 34.472 58.284 34.4C58.06 34.328 57.808 34.256 57.528 34.184C57.12 34.088 56.76 33.976 56.448 33.848C56.144 33.712 55.884 33.548 55.668 33.356C55.46 33.164 55.3 32.944 55.188 32.696C55.084 32.44 55.032 32.14 55.032 31.796C55.032 31.468 55.1 31.164 55.236 30.884C55.38 30.604 55.576 30.364 55.824 30.164C56.072 29.956 56.364 29.796 56.7 29.684C57.036 29.572 57.396 29.516 57.78 29.516C58.212 29.516 58.596 29.576 58.932 29.696C59.276 29.808 59.58 29.976 59.844 30.2C60.108 30.424 60.336 30.692 60.528 31.004L59.868 31.652C59.7 31.388 59.508 31.16 59.292 30.968C59.084 30.776 58.852 30.632 58.596 30.536C58.348 30.432 58.072 30.38 57.768 30.38C57.416 30.38 57.104 30.44 56.832 30.56C56.568 30.68 56.36 30.848 56.208 31.064C56.056 31.272 55.98 31.512 55.98 31.784C55.98 31.984 56.016 32.164 56.088 32.324C56.16 32.476 56.272 32.612 56.424 32.732C56.584 32.844 56.788 32.948 57.036 33.044C57.292 33.132 57.596 33.216 57.948 33.296C58.364 33.392 58.736 33.508 59.064 33.644C59.4 33.78 59.684 33.944 59.916 34.136C60.156 34.32 60.336 34.536 60.456 34.784C60.584 35.032 60.648 35.316 60.648 35.636C60.648 36.132 60.524 36.568 60.276 36.944C60.028 37.312 59.68 37.6 59.232 37.808C58.792 38.016 58.276 38.12 57.684 38.12ZM65.2608 38V30.512H62.8608V29.6H68.6928V30.512H66.1968V38H65.2608ZM74.7038 38.084C74.0718 38.084 73.5078 37.944 73.0118 37.664C72.5158 37.376 72.1238 36.984 71.8358 36.488C71.5558 35.984 71.4158 35.416 71.4158 34.784V29.6H72.3518V34.676C72.3518 35.148 72.4558 35.572 72.6638 35.948C72.8718 36.324 73.1518 36.62 73.5038 36.836C73.8638 37.052 74.2638 37.16 74.7038 37.16C75.1678 37.16 75.5798 37.052 75.9398 36.836C76.3078 36.62 76.5958 36.324 76.8038 35.948C77.0118 35.572 77.1158 35.148 77.1158 34.676V29.6H78.0158V34.784C78.0158 35.416 77.8718 35.984 77.5838 36.488C77.3038 36.984 76.9118 37.376 76.4078 37.664C75.9118 37.944 75.3438 38.084 74.7038 38.084ZM81.6407 38V29.6H84.8087C85.3847 29.6 85.9087 29.704 86.3807 29.912C86.8607 30.112 87.2767 30.4 87.6287 30.776C87.9807 31.152 88.2527 31.596 88.4447 32.108C88.6367 32.62 88.7327 33.184 88.7327 33.8C88.7327 34.416 88.6367 34.984 88.4447 35.504C88.2527 36.016 87.9807 36.46 87.6287 36.836C87.2847 37.204 86.8727 37.492 86.3927 37.7C85.9127 37.9 85.3847 38 84.8087 38H81.6407ZM82.5767 37.256L82.4687 37.088H84.7487C85.1887 37.088 85.5927 37.012 85.9607 36.86C86.3367 36.7 86.6567 36.476 86.9207 36.188C87.1927 35.892 87.4007 35.544 87.5447 35.144C87.6967 34.744 87.7727 34.296 87.7727 33.8C87.7727 33.304 87.6967 32.856 87.5447 32.456C87.4007 32.056 87.1927 31.712 86.9207 31.424C86.6487 31.128 86.3287 30.904 85.9607 30.752C85.5927 30.592 85.1887 30.512 84.7487 30.512H82.4327L82.5767 30.368V37.256ZM91.1869 38V37.112H92.5429V30.488H91.1869V29.6H94.8349V30.488H93.4789V37.112H94.8349V38H91.1869ZM101.407 38.12C100.815 38.12 100.267 38.016 99.7631 37.808C99.2671 37.592 98.8311 37.292 98.4551 36.908C98.0871 36.524 97.7991 36.072 97.5911 35.552C97.3911 35.024 97.2911 34.448 97.2911 33.824C97.2911 33.2 97.3911 32.628 97.5911 32.108C97.7991 31.58 98.0871 31.124 98.4551 30.74C98.8311 30.348 99.2671 30.048 99.7631 29.84C100.267 29.624 100.815 29.516 101.407 29.516C102.007 29.516 102.555 29.624 103.051 29.84C103.555 30.048 103.991 30.348 104.359 30.74C104.735 31.124 105.023 31.58 105.223 32.108C105.431 32.628 105.535 33.2 105.535 33.824C105.535 34.44 105.431 35.012 105.223 35.54C105.023 36.06 104.735 36.516 104.359 36.908C103.991 37.292 103.555 37.592 103.051 37.808C102.555 38.016 102.007 38.12 101.407 38.12ZM101.407 37.196C101.863 37.196 102.283 37.116 102.667 36.956C103.059 36.788 103.395 36.552 103.675 36.248C103.955 35.944 104.171 35.588 104.323 35.18C104.483 34.764 104.563 34.312 104.563 33.824C104.563 33.328 104.483 32.876 104.323 32.468C104.171 32.052 103.955 31.692 103.675 31.388C103.395 31.084 103.059 30.848 102.667 30.68C102.283 30.512 101.863 30.428 101.407 30.428C100.951 30.428 100.527 30.512 100.135 30.68C99.7511 30.848 99.4191 31.084 99.1391 31.388C98.8591 31.692 98.6431 32.052 98.4911 32.468C98.3391 32.876 98.2631 33.328 98.2631 33.824C98.2631 34.312 98.3391 34.764 98.4911 35.18C98.6431 35.588 98.8591 35.944 99.1391 36.248C99.4191 36.552 99.7511 36.788 100.135 36.956C100.527 37.116 100.951 37.196 101.407 37.196ZM111.009 38.12C110.585 38.12 110.185 38.06 109.809 37.94C109.433 37.82 109.089 37.64 108.777 37.4C108.465 37.16 108.189 36.864 107.949 36.512L108.597 35.792C108.973 36.328 109.357 36.704 109.749 36.92C110.149 37.136 110.597 37.244 111.093 37.244C111.453 37.244 111.781 37.184 112.077 37.064C112.373 36.944 112.605 36.776 112.773 36.56C112.941 36.344 113.025 36.096 113.025 35.816C113.025 35.632 112.993 35.468 112.929 35.324C112.873 35.18 112.785 35.052 112.665 34.94C112.545 34.828 112.397 34.728 112.221 34.64C112.045 34.552 111.841 34.472 111.609 34.4C111.385 34.328 111.133 34.256 110.853 34.184C110.445 34.088 110.085 33.976 109.773 33.848C109.469 33.712 109.209 33.548 108.993 33.356C108.785 33.164 108.625 32.944 108.513 32.696C108.409 32.44 108.357 32.14 108.357 31.796C108.357 31.468 108.425 31.164 108.561 30.884C108.705 30.604 108.901 30.364 109.149 30.164C109.397 29.956 109.689 29.796 110.025 29.684C110.361 29.572 110.721 29.516 111.105 29.516C111.537 29.516 111.921 29.576 112.257 29.696C112.601 29.808 112.905 29.976 113.169 30.2C113.433 30.424 113.661 30.692 113.853 31.004L113.193 31.652C113.025 31.388 112.833 31.16 112.617 30.968C112.409 30.776 112.177 30.632 111.921 30.536C111.673 30.432 111.397 30.38 111.093 30.38C110.741 30.38 110.429 30.44 110.157 30.56C109.893 30.68 109.685 30.848 109.533 31.064C109.381 31.272 109.305 31.512 109.305 31.784C109.305 31.984 109.341 32.164 109.413 32.324C109.485 32.476 109.597 32.612 109.749 32.732C109.909 32.844 110.113 32.948 110.361 33.044C110.617 33.132 110.921 33.216 111.273 33.296C111.689 33.392 112.061 33.508 112.389 33.644C112.725 33.78 113.009 33.944 113.241 34.136C113.481 34.32 113.661 34.536 113.781 34.784C113.909 35.032 113.973 35.316 113.973 35.636C113.973 36.132 113.849 36.568 113.601 36.944C113.353 37.312 113.005 37.6 112.557 37.808C112.117 38.016 111.601 38.12 111.009 38.12Z" fill="#3E2B5A" />
            </svg>
          </Link>
          <p className="text-muted-foreground">
            Create your account
          </p>
        </div>

        {/* Social Signup Buttons */}
        <div className="mb-6 flex gap-3">
          <button className="btn btn-outline w-full gap-2 flex-1" onClick={() => signInWith("oauth_google")}>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" height="20" viewBox="0 0 20 20" width="20">
              <g clipPath="url(#clip0_98_45)">
                <path d="M19.9905 10.1871C19.9905 9.36773 19.9224 8.7698 19.7752 8.14972H10.1992V11.848H15.8201C15.7068 12.7671 15.0948 14.1512 13.7349 15.0813L13.7159 15.2051L16.7436 17.497L16.9534 17.5174C18.8798 15.779 19.9905 13.2211 19.9905 10.1871Z" fill="#4285F4" />
                <path d="M10.1992 19.9313C12.953 19.9313 15.2648 19.0454 16.9534 17.5174L13.7349 15.0813C12.8737 15.6682 11.7177 16.0779 10.1992 16.0779C7.50211 16.0779 5.21297 14.3395 4.39695 11.9366L4.27734 11.9466L1.12906 14.3273L1.08789 14.4391C2.76508 17.6945 6.21016 19.9313 10.1992 19.9313Z" fill="#34A853" />
                <path d="M4.39695 11.9366C4.18164 11.3166 4.05703 10.6521 4.05703 9.96565C4.05703 9.27908 4.18164 8.61473 4.38562 7.99466L4.37992 7.8626L1.19219 5.44366L1.08789 5.49214C0.396641 6.84305 0 8.36008 0 9.96565C0 11.5712 0.396641 13.0882 1.08789 14.4391L4.39695 11.9366Z" fill="#FBBC05" />
                <path d="M10.1992 3.85336C12.1144 3.85336 13.4062 4.66168 14.1429 5.33718L17.0213 2.59107C15.2535 0.985496 12.953 0 10.1992 0C6.21016 0 2.76508 2.23672 1.08789 5.49214L4.38563 7.99466C5.21297 5.59183 7.50211 3.85336 10.1992 3.85336Z" fill="#EB4335" />
              </g>
              <defs>
                <clipPath id="clip0_98_45">
                  <rect fill="white" height="20" width="20" />
                </clipPath>
              </defs>
            </svg>
            Google
          </button>

          <button className="btn btn-outline w-full gap-2 flex-1" onClick={() => signInWith("oauth_github")}>
            <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
            </svg>
            GitHub
          </button>
        </div>

        {/* Divider */}
        <div className="divider">OR</div>

        {/* Registration Form */}
        <form className="space-y-4" onSubmit={handleSubmit(onSubmit)}>

          <div className="form-control">
            <label className="label">
              <span className="label-text font-medium">Email</span>
            </label>
            <input
              {...register("email")}
              type="email"
              placeholder="Enter your email"
              className="input input-bordered w-full"
            />
            <div className="min-h-5 mt-1">
              {errors.email && (
                <p className="text-error text-sm">{errors.email.message as string}</p>
              )}
            </div>
          </div>

          <div className="form-control">
            <label className="label">
              <span className="label-text font-medium">Password</span>
            </label>
            <div className="relative">
              <input
                {...register("password")}
                type={showPassword ? "text" : "password"}
                placeholder="Create a password"
                className="input input-bordered w-full pr-12"
              />
              <button
                type="button"
                className="absolute inset-y-0 right-0 pr-3 flex items-center"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? (
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                  </svg>
                ) : (
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                )}
              </button>
            </div>
            <div className="min-h-5 mt-1">
              {errors.password && (
                <p className="text-error text-sm">{errors.password.message as string}</p>
              )}
            </div>
          </div>

          <button type="submit" disabled={isSubmitting} className="btn btn-primary w-full">
            {isSubmitting ? (
              <>
                <span className="loading loading-spinner"></span>
                Loading
              </>
            ) : "Create Account"}
          </button>
        </form>

        {/* Login Link */}
        <div className="text-center mt-6">
          <span className="text-sm text-gray-600">
            Already have an account?{' '}
            <Link href="/login" className="link link-primary font-medium">
              Sign in
            </Link>
          </span>
        </div>
      </div>
    </div>
  );
}
